#!/usr/bin/env python3
import itertools

import rclpy
from rclpy.node import Node
from std_msgs.msg import Header
from actuator_msgs.msg import Actuators

stepping_sequence = [
    [-0.2, 0.2, 0.0],
    [ 0.2, 0.2, 0.2],
    [ 0.2, -0.5, -1.0],
    [-0.2, -0.5, -1.0],
]
class ActuatorPublisher(Node):
    def __init__(self):
        super().__init__('actuator_publisher')
        self.publisher_ = self.create_publisher(Actuators, '/actuators', 10)
        self.timer_ = self.create_timer(0.3, self.publish_message)

        self.i = 0

    def publish_message(self):
        # Set joint angles
        a, b, c = stepping_sequence[self.i]
        self.i += 1
        if self.i >= len(stepping_sequence):
            self.i = 0
        # Create and publish message
        msg = Actuators()
        msg.header = Header()
        msg.header.stamp = self.get_clock().now().to_msg()
        msg.position = [a, b, c]*3 + [-a, -b, -c]*3
        self.publisher_.publish(msg)

def main(args=None):
    rclpy.init(args=args)
    node = ActuatorPublisher()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()
