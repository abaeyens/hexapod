#!/usr/bin/env python3
"""
Generate a cmd_vel reference consisting
of a forward motion in the world frame
coupled with a simultaneous body rotation.

Usage:
ros2 run app walk_sideways_while_rotating --ros-args -p use_sim_time:=true
"""
import math

import rclpy
from rclpy.node import Node
from std_msgs.msg import Header
from geometry_msgs.msg import TwistStamped

# Forward velocity
VFORWARD = 0.08
# Angular velocity
OMEGA = 20 * math.pi/180
# Timestep
DT = 0.1


class ActuatorPublisher(Node):
    def __init__(self):
        super().__init__('actuator_publisher')
        self.publisher_ = self.create_publisher(TwistStamped, 'cmd_vel', 10)
        self.timer_ = self.create_timer(DT, self.publish_cmd_vel)
        # Heading angle
        self.theta = 0

    def publish_cmd_vel(self):
        self.theta += OMEGA * DT
        # Create and publish message
        msg = TwistStamped()
        msg.header = Header()
        msg.header.stamp = self.get_clock().now().to_msg()
        # Project forward velocity to body
        msg.twist.linear.x = VFORWARD * math.cos(-self.theta)
        msg.twist.linear.y = VFORWARD * math.sin(-self.theta)
        msg.twist.angular.z = OMEGA
        self.publisher_.publish(msg)

def main(args=None):
    rclpy.init(args=args)
    node = ActuatorPublisher()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()
